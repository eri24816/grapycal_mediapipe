{"extensions": ["grapycal_builtin_504515", "grapycal_mediapipe_747764"], "client_id_count": 301, "id_count": 1284, "workspace_serialized": {"id": "0_1", "type": "WorkspaceObject", "attributes": [["main_editor", "obj", "0_4", true]], "children": {"0_2": {"id": "0_2", "type": "WebcamStream", "attributes": [["image", "string", "", true], ["source_client", "int", -1, true]], "children": {}, "user_attribute_references": {"image": "image", "source_client": "source_client"}, "user_sobject_references": {}}, "0_3": {"id": "0_3", "type": "Sidebar", "attributes": [], "children": {"0_5": {"id": "0_5", "type": "grapycal_builtin_504515.AdditionNode", "attributes": [["shape", "string", "round", true], ["output", "list", [], false], ["label", "string", "+", false], ["label_offset", "float", -0.09, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "function/math", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.AdditionNode", true], ["in_ports", "obj_list", ["0_6"], true], ["out_ports", "obj_list", ["0_7"], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_6": {"id": "0_6", "type": "InputPort", "attributes": [["name", "string", "items", true], ["display_name", "string", "", true], ["max_edges", "int", 1024, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_7": {"id": "0_7", "type": "OutputPort", "attributes": [["name", "string", "sum", true], ["display_name", "string", "", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {}}, "0_8": {"id": "0_8", "type": "grapycal_builtin_504515.DivisionNode", "attributes": [["shape", "string", "round", true], ["output", "list", [], false], ["label", "string", "/", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "function/math", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.DivisionNode", true], ["in_ports", "obj_list", ["0_9", "0_10"], true], ["out_ports", "obj_list", ["0_11"], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_9": {"id": "0_9", "type": "InputPort", "attributes": [["name", "string", "a", true], ["display_name", "string", "", true], ["max_edges", "int", 1024, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_10": {"id": "0_10", "type": "InputPort", "attributes": [["name", "string", "b", true], ["display_name", "string", "", true], ["max_edges", "int", 1024, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_11": {"id": "0_11", "type": "OutputPort", "attributes": [["name", "string", "a/b", true], ["display_name", "string", "", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {}}, "0_12": {"id": "0_12", "type": "grapycal_builtin_504515.EvalNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Evaluate", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_15/text", "display_name": "expression", "editor_args": {"type": "text"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.EvalNode", true], ["in_ports", "obj_list", ["0_13"], true], ["out_ports", "obj_list", ["0_14"], true], ["controls", "obj_dict", {"expr_control": "0_15"}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_13": {"id": "0_13", "type": "InputPort", "attributes": [["name", "string", "run", true], ["display_name", "string", "run", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_14": {"id": "0_14", "type": "OutputPort", "attributes": [["name", "string", "", true], ["display_name", "string", "", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_15": {"id": "0_15", "type": "TextControl", "attributes": [["text", "string", "", true], ["label", "string", "", true], ["editable", "int", 1, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {"run_port": "0_13", "out_port": "0_14", "expr_control": "0_15"}}, "0_16": {"id": "0_16", "type": "grapycal_builtin_504515.EventNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Event", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "procedural", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.EventNode", true], ["in_ports", "obj_list", ["0_17"], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_17": {"id": "0_17", "type": "InputPort", "attributes": [["name", "string", "run", true], ["display_name", "string", "run", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {"run_port": "0_17"}}, "0_18": {"id": "0_18", "type": "grapycal_builtin_504515.ExecNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Execute", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_18/inputs", "display_name": "inputs", "editor_args": {"type": "list"}}, {"name": "a/0_18/outputs", "display_name": "outputs", "editor_args": {"type": "list"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.ExecNode", true], ["in_ports", "obj_list", ["0_19"], true], ["out_ports", "obj_list", ["0_20"], true], ["controls", "obj_dict", {"text": "0_21", "output_control": "0_22"}, true], ["inputs", "list", [], true], ["outputs", "list", [], true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_19": {"id": "0_19", "type": "InputPort", "attributes": [["name", "string", "run", true], ["display_name", "string", "run", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_20": {"id": "0_20", "type": "OutputPort", "attributes": [["name", "string", "done", true], ["display_name", "string", "done", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_21": {"id": "0_21", "type": "TextControl", "attributes": [["text", "string", "", true], ["label", "string", "", true], ["editable", "int", 1, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}, "0_22": {"id": "0_22", "type": "TextControl", "attributes": [["text", "string", "", false], ["label", "string", "", true], ["editable", "int", 0, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "inputs": "inputs", "outputs": "outputs"}, "user_sobject_references": {"run_port": "0_19", "out_port": "0_20", "text_control": "0_21", "output_control": "0_22"}}, "0_23": {"id": "0_23", "type": "grapycal_builtin_504515.ForNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "For", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "procedural", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.ForNode", true], ["in_ports", "obj_list", ["0_24"], true], ["out_ports", "obj_list", ["0_25"], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_24": {"id": "0_24", "type": "InputPort", "attributes": [["name", "string", "iterable", true], ["display_name", "string", "iterable", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_25": {"id": "0_25", "type": "OutputPort", "attributes": [["name", "string", "item", true], ["display_name", "string", "item", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {"iterable_port": "0_24", "item_port": "0_25"}}, "0_26": {"id": "0_26", "type": "grapycal_builtin_504515.FuncCallNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Call:", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "function", true], ["exposed_attributes", "list", [{"name": "a/0_26/func_name", "display_name": "func_name", "editor_args": {"type": "text"}}], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.FuncCallNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {}, true], ["func_name", "string", "", true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "func_name": "func_name"}, "user_sobject_references": {}}, "0_27": {"id": "0_27", "type": "grapycal_builtin_504515.FuncInNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Input of: ", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "function", true], ["exposed_attributes", "list", [{"name": "a/0_27/func_name", "display_name": "func_name", "editor_args": {"type": "text"}}, {"name": "a/0_27/outs", "display_name": "outs", "editor_args": {"type": "list"}}], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.FuncInNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", ["0_28"], true], ["controls", "obj_dict", {}, true], ["func_name", "string", "", true], ["outs", "list", ["x"], true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_28": {"id": "0_28", "type": "OutputPort", "attributes": [["name", "string", "x", true], ["display_name", "string", "x", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "func_name": "func_name", "outs": "outs"}, "user_sobject_references": {}}, "0_29": {"id": "0_29", "type": "grapycal_builtin_504515.FuncOutNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Output of: ", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "function", true], ["exposed_attributes", "list", [{"name": "a/0_29/func_name", "display_name": "func_name", "editor_args": {"type": "text"}}, {"name": "a/0_29/ins", "display_name": "ins", "editor_args": {"type": "list"}}], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.FuncOutNode", true], ["in_ports", "obj_list", ["0_30"], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {}, true], ["func_name", "string", "", true], ["ins", "list", ["x"], true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_30": {"id": "0_30", "type": "InputPort", "attributes": [["name", "string", "x", true], ["display_name", "string", "x", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "func_name": "func_name", "ins": "ins"}, "user_sobject_references": {}}, "0_31": {"id": "0_31", "type": "grapycal_builtin_504515.ImageDisplayNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Display Image", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_31/cmap", "display_name": "cmap", "editor_args": {"options": ["gray", "viridis", "plasma", "inferno", "magma", "cividis", "Greys", "Purples", "Blues", "Greens", "Oranges", "Reds", "YlOrBr", "YlOrRd", "OrRd", "PuRd", "RdPu", "BuPu", "GnBu", "PuBu", "YlGnBu", "PuBuGn", "BuGn", "YlGn", "binary", "gist_yarg", "gist_gray", "gray", "bone", "pink", "spring", "summer", "autumn", "winter", "cool", "Wistia", "hot", "afmhot", "gist_heat", "copper", "PiYG", "PRGn", "BrBG", "PuOr", "RdGy", "RdBu", "RdYlBu", "RdYlGn", "Spectral", "coolwarm", "bwr", "seismic", "twilight", "twilight_shifted", "hsv", "Pastel1", "Pastel2", "Paired", "Accent", "Dark2", "Set1", "Set2", "Set3", "tab10", "tab20", "tab20b", "tab20c", "flag", "prism", "ocean", "gist_earth", "terrain", "gist_stern", "gnuplot", "gnuplot2", "CMRmap", "cubehelix", "brg", "gist_rainbow", "rainbow", "jet", "nipy_spectral", "gist_ncar"], "type": "options"}}, {"name": "a/0_31/vmin", "display_name": "vmin", "editor_args": {"type": "float"}}, {"name": "a/0_31/vmax", "display_name": "vmax", "editor_args": {"type": "float"}}], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.ImageDisplayNode", true], ["in_ports", "obj_list", ["0_34"], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {"img": "0_32", "slice": "0_33"}, true], ["cmap", "string", "gray", true], ["vmin", "float", 0, true], ["vmax", "float", 1, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_32": {"id": "0_32", "type": "ImageControl", "attributes": [["image", "string", "/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k=", false]], "children": {}, "user_attribute_references": {"image": "image"}, "user_sobject_references": {}}, "0_33": {"id": "0_33", "type": "TextControl", "attributes": [["text", "string", ":", true], ["label", "string", "slice: ", true], ["editable", "int", 1, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}, "0_34": {"id": "0_34", "type": "InputPort", "attributes": [["name", "string", "data", true], ["display_name", "string", "data", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "cmap": "cmap", "vmin": "vmin", "vmax": "vmax"}, "user_sobject_references": {"img": "0_32", "slice": "0_33", "in_port": "0_34"}}, "0_35": {"id": "0_35", "type": "grapycal_builtin_504515.ImagePasteNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Paste Image", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_35/format", "display_name": "format", "editor_args": {"options": ["torch", "numpy"], "type": "options"}}], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.ImagePasteNode", true], ["in_ports", "obj_list", ["0_36"], true], ["out_ports", "obj_list", ["0_38"], true], ["controls", "obj_dict", {"img": "0_37"}, true], ["format", "string", "torch", true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_36": {"id": "0_36", "type": "InputPort", "attributes": [["name", "string", "run", true], ["display_name", "string", "run", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_37": {"id": "0_37", "type": "ImageControl", "attributes": [["image", "string", "/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k=", false]], "children": {}, "user_attribute_references": {"image": "image"}, "user_sobject_references": {}}, "0_38": {"id": "0_38", "type": "OutputPort", "attributes": [["name", "string", "img", true], ["display_name", "string", "img", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "format": "format"}, "user_sobject_references": {"run_port": "0_36", "img": "0_37", "out_port": "0_38"}}, "0_39": {"id": "0_39", "type": "grapycal_builtin_504515.InPortalNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "\ud83d\udd35", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "procedural", true], ["exposed_attributes", "list", [{"name": "a/0_39/name", "display_name": "name", "editor_args": {"type": "text"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.InPortalNode", true], ["in_ports", "obj_list", ["0_40"], true], ["out_ports", "obj_list", ["0_41"], true], ["controls", "obj_dict", {}, true], ["name", "string", "", true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_40": {"id": "0_40", "type": "InputPort", "attributes": [["name", "string", "jump", true], ["display_name", "string", "", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_41": {"id": "0_41", "type": "OutputPort", "attributes": [["name", "string", "then", true], ["display_name", "string", "", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "name": "name"}, "user_sobject_references": {"in_port": "0_40", "out_port": "0_41"}}, "0_42": {"id": "0_42", "type": "grapycal_builtin_504515.LabelNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Node", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_42/label", "display_name": "label", "editor_args": {"type": "text"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.LabelNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {}}, "0_43": {"id": "0_43", "type": "grapycal_builtin_504515.LambdaNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Lambda", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "function", true], ["exposed_attributes", "list", [{"name": "a/0_43/input_args", "display_name": "input_args", "editor_args": {"type": "list"}}, {"name": "a/0_43/outputs", "display_name": "outputs", "editor_args": {"type": "list"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.LambdaNode", true], ["in_ports", "obj_list", ["0_44"], true], ["out_ports", "obj_list", ["0_45"], true], ["controls", "obj_dict", {"": "0_46"}, true], ["text_controls", "obj_dict", {"": "0_46"}, true], ["input_args", "list", ["x"], true], ["outputs", "list", [""], true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_44": {"id": "0_44", "type": "InputPort", "attributes": [["name", "string", "x", true], ["display_name", "string", "x", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_45": {"id": "0_45", "type": "OutputPort", "attributes": [["name", "string", "", true], ["display_name", "string", "", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_46": {"id": "0_46", "type": "TextControl", "attributes": [["text", "string", "x", true], ["label", "string", " = ", true], ["editable", "int", 1, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "text_controls": "text_controls", "input_args": "input_args", "outputs": "outputs"}, "user_sobject_references": {}}, "0_47": {"id": "0_47", "type": "grapycal_builtin_504515.LimiterNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Limiter", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "procedural", true], ["exposed_attributes", "list", [{"name": "a/0_47/reduce_factor", "display_name": "reduce_factor", "editor_args": {"type": "int"}}, {"name": "a/0_47/time_span", "display_name": "time_span", "editor_args": {"type": "float"}}], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.LimiterNode", true], ["in_ports", "obj_list", ["0_48"], true], ["out_ports", "obj_list", ["0_49"], true], ["controls", "obj_dict", {}, true], ["reduce_factor", "int", 10, true], ["time_span", "float", 0.2, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_48": {"id": "0_48", "type": "InputPort", "attributes": [["name", "string", "in", true], ["display_name", "string", "in", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_49": {"id": "0_49", "type": "OutputPort", "attributes": [["name", "string", "out", true], ["display_name", "string", "out", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "reduce_factor": "reduce_factor", "time_span": "time_span"}, "user_sobject_references": {"in_port": "0_48", "out_port": "0_49"}}, "0_50": {"id": "0_50", "type": "grapycal_builtin_504515.ListNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "List (0)", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "data", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.ListNode", true], ["in_ports", "obj_list", ["0_51", "0_52", "0_53"], true], ["out_ports", "obj_list", ["0_54"], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_51": {"id": "0_51", "type": "InputPort", "attributes": [["name", "string", "run", true], ["display_name", "string", "run", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_52": {"id": "0_52", "type": "InputPort", "attributes": [["name", "string", "set", true], ["display_name", "string", "set", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_53": {"id": "0_53", "type": "InputPort", "attributes": [["name", "string", "append", true], ["display_name", "string", "append", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_54": {"id": "0_54", "type": "OutputPort", "attributes": [["name", "string", "get", true], ["display_name", "string", "get", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {"run_port": "0_51", "set_port": "0_52", "append_port": "0_53", "get_port": "0_54"}}, "0_55": {"id": "0_55", "type": "grapycal_builtin_504515.MultiplicationNode", "attributes": [["shape", "string", "round", true], ["output", "list", [], false], ["label", "string", "*", false], ["label_offset", "float", -0.09, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "function/math", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.MultiplicationNode", true], ["in_ports", "obj_list", ["0_56"], true], ["out_ports", "obj_list", ["0_57"], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_56": {"id": "0_56", "type": "InputPort", "attributes": [["name", "string", "items", true], ["display_name", "string", "", true], ["max_edges", "int", 1024, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_57": {"id": "0_57", "type": "OutputPort", "attributes": [["name", "string", "product", true], ["display_name", "string", "", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {}}, "0_58": {"id": "0_58", "type": "grapycal_builtin_504515.OutPortalNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "\ud83d\udfe0", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "procedural", true], ["exposed_attributes", "list", [{"name": "a/0_58/name", "display_name": "name", "editor_args": {"type": "text"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.OutPortalNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", ["0_59"], true], ["controls", "obj_dict", {}, true], ["name", "string", "", true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_59": {"id": "0_59", "type": "OutputPort", "attributes": [["name", "string", "do", true], ["display_name", "string", "", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "name": "name"}, "user_sobject_references": {"out_port": "0_59"}}, "0_60": {"id": "0_60", "type": "grapycal_builtin_504515.PrintNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Print", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.PrintNode", true], ["in_ports", "obj_list", ["0_61"], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {"Control0": "0_62"}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_61": {"id": "0_61", "type": "InputPort", "attributes": [["name", "string", "", true], ["display_name", "string", "", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_62": {"id": "0_62", "type": "TextControl", "attributes": [["text", "string", "", false], ["label", "string", "", true], ["editable", "int", 0, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {"text_control": "0_62"}}, "0_63": {"id": "0_63", "type": "grapycal_builtin_504515.ProcedureNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Steps", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "procedural", true], ["exposed_attributes", "list", [{"name": "a/0_63/steps", "display_name": "steps", "editor_args": {"type": "list"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["thin"], true], ["type", "string", "grapycal_builtin_504515.ProcedureNode", true], ["in_ports", "obj_list", ["0_64"], true], ["out_ports", "obj_list", ["0_66"], true], ["controls", "obj_dict", {"Control0": "0_65"}, true], ["steps", "list", ["1"], true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_64": {"id": "0_64", "type": "InputPort", "attributes": [["name", "string", "", true], ["display_name", "string", "", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_65": {"id": "0_65", "type": "ButtonControl", "attributes": [["label", "string", "+", true], ["click", "event", null, false]], "children": {}, "user_attribute_references": {"label": "label", "_click": "click"}, "user_sobject_references": {}}, "0_66": {"id": "0_66", "type": "OutputPort", "attributes": [["name", "string", "1", true], ["display_name", "string", "1", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "steps": "steps"}, "user_sobject_references": {"in_port": "0_64", "add_btn": "0_65"}}, "0_67": {"id": "0_67", "type": "grapycal_builtin_504515.SplitNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Split", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "data", true], ["exposed_attributes", "list", [{"name": "a/0_67/keys", "display_name": "keys", "editor_args": {"type": "list"}}, {"name": "a/0_67/key mode", "display_name": "key mode", "editor_args": {"options": ["string", "eval"], "type": "options"}}], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.SplitNode", true], ["in_ports", "obj_list", ["0_68"], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {}, true], ["keys", "list", [], true], ["key mode", "string", "string", true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_68": {"id": "0_68", "type": "InputPort", "attributes": [["name", "string", "list/dict", true], ["display_name", "string", "list/dict", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "keys": "keys", "key_mode": "key mode"}, "user_sobject_references": {"in_port": "0_68"}}, "0_69": {"id": "0_69", "type": "grapycal_builtin_504515.SubtractionNode", "attributes": [["shape", "string", "round", true], ["output", "list", [], false], ["label", "string", "-", false], ["label_offset", "float", -0.09, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "function/math", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.SubtractionNode", true], ["in_ports", "obj_list", ["0_70", "0_71"], true], ["out_ports", "obj_list", ["0_72"], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_70": {"id": "0_70", "type": "InputPort", "attributes": [["name", "string", "a", true], ["display_name", "string", "", true], ["max_edges", "int", 1024, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_71": {"id": "0_71", "type": "InputPort", "attributes": [["name", "string", "b", true], ["display_name", "string", "", true], ["max_edges", "int", 1024, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_72": {"id": "0_72", "type": "OutputPort", "attributes": [["name", "string", "a-b", true], ["display_name", "string", "", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {}}, "0_73": {"id": "0_73", "type": "grapycal_builtin_504515.VariableNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Variable", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "data", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.VariableNode", true], ["in_ports", "obj_list", ["0_74", "0_75"], true], ["out_ports", "obj_list", ["0_76"], true], ["controls", "obj_dict", {"variable_name": "0_77"}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_74": {"id": "0_74", "type": "InputPort", "attributes": [["name", "string", "run", true], ["display_name", "string", "run", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_75": {"id": "0_75", "type": "InputPort", "attributes": [["name", "string", "set", true], ["display_name", "string", "set", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_76": {"id": "0_76", "type": "OutputPort", "attributes": [["name", "string", "get", true], ["display_name", "string", "get", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_77": {"id": "0_77", "type": "TextControl", "attributes": [["text", "string", "", true], ["label", "string", "", true], ["editable", "int", 1, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {"run_port": "0_74", "in_port": "0_75", "out_port": "0_76", "variable_name": "0_77"}}, "0_78": {"id": "0_78", "type": "grapycal_builtin_504515.WebcamNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Webcam", false], ["label_offset", "float", 0, true], ["translation", "string", "", true], ["is_preview", "int", 1, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_78/format", "display_name": "format", "editor_args": {"options": ["torch", "numpy"], "type": "options"}}], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.WebcamNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", ["0_79"], true], ["controls", "obj_dict", {"button": "0_80"}, true], ["format", "string", "torch", true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_79": {"id": "0_79", "type": "OutputPort", "attributes": [["name", "string", "img", true], ["display_name", "string", "img", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_80": {"id": "0_80", "type": "ButtonControl", "attributes": [["label", "string", "Start streamimg", true], ["click", "event", null, false]], "children": {}, "user_attribute_references": {"label": "label", "_click": "click"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "format": "format"}, "user_sobject_references": {"out_port": "0_79", "button": "0_80"}}, "0_1272": {"id": "0_1272", "type": "grapycal_mediapipe_747764.PoseEstimateNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Pose Estimate", false], ["label_offset", "float", 0, true], ["translation", "string", "0,0", true], ["is_preview", "int", 1, true], ["category", "string", "mediapipe", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_mediapipe_747764.PoseEstimateNode", true], ["in_ports", "obj_list", ["0_1273"], true], ["out_ports", "obj_list", ["0_1274", "0_1275"], true], ["controls", "obj_dict", {"load detector": "0_1276"}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_1273": {"id": "0_1273", "type": "InputPort", "attributes": [["name", "string", "image", true], ["display_name", "string", "image", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_1274": {"id": "0_1274", "type": "OutputPort", "attributes": [["name", "string", "points", true], ["display_name", "string", "points", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_1275": {"id": "0_1275", "type": "OutputPort", "attributes": [["name", "string", "annotated img", true], ["display_name", "string", "annotated img", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_1276": {"id": "0_1276", "type": "ButtonControl", "attributes": [["label", "string", "load detector", true], ["click", "event", null, false]], "children": {}, "user_attribute_references": {"label": "label", "_click": "click"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {"points_port": "0_1274", "annotated_img_port": "0_1275", "load_detector_button": "0_1276"}}, "0_1277": {"id": "0_1277", "type": "grapycal_mediapipe_747764.ThreeNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Three", false], ["label_offset", "float", 0, true], ["translation", "string", "0,0", true], ["is_preview", "int", 1, true], ["category", "string", "mediapipe", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_mediapipe_747764.ThreeNode", true], ["in_ports", "obj_list", ["0_1279", "0_1280"], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {"three": "0_1278"}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_1278": {"id": "0_1278", "type": "ThreeControl", "attributes": [["points", "list", [], true], ["lines", "list", [], true]], "children": {}, "user_attribute_references": {"points": "points", "lines": "lines"}, "user_sobject_references": {}}, "0_1279": {"id": "0_1279", "type": "InputPort", "attributes": [["name", "string", "points", true], ["display_name", "string", "points", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_1280": {"id": "0_1280", "type": "InputPort", "attributes": [["name", "string", "lines", true], ["display_name", "string", "lines", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {"three": "0_1278", "points_port": "0_1279", "lines_port": "0_1280"}}}, "user_attribute_references": {}, "user_sobject_references": {}}, "0_4": {"id": "0_4", "type": "Editor", "attributes": [], "children": {"0_81": {"id": "0_81", "type": "grapycal_builtin_504515.WebcamNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Webcam", false], ["label_offset", "float", 0, true], ["translation", "string", "-473.415635312187,-47.767542332953084", true], ["is_preview", "int", 0, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_81/format", "display_name": "format", "editor_args": {"options": ["torch", "numpy"], "type": "options"}}], true], ["running", "int", 198, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.WebcamNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", ["0_82"], true], ["controls", "obj_dict", {"button": "0_83"}, true], ["format", "string", "numpy", true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_82": {"id": "0_82", "type": "OutputPort", "attributes": [["name", "string", "img", true], ["display_name", "string", "img", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_83": {"id": "0_83", "type": "ButtonControl", "attributes": [["label", "string", "Start streamimg", true], ["click", "event", null, false]], "children": {}, "user_attribute_references": {"label": "label", "_click": "click"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "format": "format"}, "user_sobject_references": {"out_port": "0_82", "button": "0_83"}}, "0_84": {"id": "0_84", "type": "grapycal_builtin_504515.ImageDisplayNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Display Image", false], ["label_offset", "float", 0, true], ["translation", "string", "-73.25266585735334,48.67259279991701", true], ["is_preview", "int", 0, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_84/cmap", "display_name": "cmap", "editor_args": {"options": ["gray", "viridis", "plasma", "inferno", "magma", "cividis", "Greys", "Purples", "Blues", "Greens", "Oranges", "Reds", "YlOrBr", "YlOrRd", "OrRd", "PuRd", "RdPu", "BuPu", "GnBu", "PuBu", "YlGnBu", "PuBuGn", "BuGn", "YlGn", "binary", "gist_yarg", "gist_gray", "gray", "bone", "pink", "spring", "summer", "autumn", "winter", "cool", "Wistia", "hot", "afmhot", "gist_heat", "copper", "PiYG", "PRGn", "BrBG", "PuOr", "RdGy", "RdBu", "RdYlBu", "RdYlGn", "Spectral", "coolwarm", "bwr", "seismic", "twilight", "twilight_shifted", "hsv", "Pastel1", "Pastel2", "Paired", "Accent", "Dark2", "Set1", "Set2", "Set3", "tab10", "tab20", "tab20b", "tab20c", "flag", "prism", "ocean", "gist_earth", "terrain", "gist_stern", "gnuplot", "gnuplot2", "CMRmap", "cubehelix", "brg", "gist_rainbow", "rainbow", "jet", "nipy_spectral", "gist_ncar"], "type": "options"}}, {"name": "a/0_84/vmin", "display_name": "vmin", "editor_args": {"type": "float"}}, {"name": "a/0_84/vmax", "display_name": "vmax", "editor_args": {"type": "float"}}], true], ["running", "int", 7080, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.ImageDisplayNode", true], ["in_ports", "obj_list", ["0_87"], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {"img": "0_85", "slice": "0_86"}, true], ["cmap", "string", "gray", true], ["vmin", "float", 0, true], ["vmax", "float", 1, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_85": {"id": "0_85", "type": "ImageControl", "attributes": [["image", "string", "/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k=", false]], "children": {}, "user_attribute_references": {"image": "image"}, "user_sobject_references": {}}, "0_86": {"id": "0_86", "type": "TextControl", "attributes": [["text", "string", ":", true], ["label", "string", "slice: ", true], ["editable", "int", 1, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}, "0_87": {"id": "0_87", "type": "InputPort", "attributes": [["name", "string", "data", true], ["display_name", "string", "data", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "cmap": "cmap", "vmin": "vmin", "vmax": "vmax"}, "user_sobject_references": {"img": "0_85", "slice": "0_86", "in_port": "0_87"}}, "0_520": {"id": "0_520", "type": "grapycal_builtin_504515.ExecNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*9/,\n                  ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*91/,\n                   ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*916/,\n                    ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*916/,\n                    ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*916/,\n                    ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*916/,\n                    ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*916/,\n                    ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*916/,\n                    ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*916/,\n                    ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*916/,\n                    ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*91/,\n                   ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*91/,\n                   ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*9/,\n                  ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*9/,\n                  ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*9/,\n                  ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*9/,\n                  ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*9/,\n                  ^\nSyntaxError: invalid syntax\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 84, in task\n    exec_(stmt,self.workspace.vars(),print_=self.print)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\interaction\\execNode.py\", line 10, in exec_\n    stmts = list(ast.iter_child_nodes(ast.parse(script)))\n                                      ^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\miniconda3\\envs\\gr\\Lib\\ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"<unknown>\", line 5\n    -landmark.y*9/,\n                  ^\nSyntaxError: invalid syntax\n"]], false], ["label", "string", "Execute", false], ["label_offset", "float", 0, true], ["translation", "string", "-114.49786673117408,-442.8918342159523", true], ["is_preview", "int", 0, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_520/inputs", "display_name": "inputs", "editor_args": {"type": "list"}}, {"name": "a/0_520/outputs", "display_name": "outputs", "editor_args": {"type": "list"}}], true], ["running", "int", 612, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.ExecNode", true], ["in_ports", "obj_list", ["0_521", "0_656"], true], ["out_ports", "obj_list", ["0_522", "0_565"], true], ["controls", "obj_dict", {"text": "0_523", "output_control": "0_524"}, true], ["inputs", "list", ["points"], true], ["outputs", "list", ["lines"], true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_521": {"id": "0_521", "type": "InputPort", "attributes": [["name", "string", "run", true], ["display_name", "string", "run", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_522": {"id": "0_522", "type": "OutputPort", "attributes": [["name", "string", "done", true], ["display_name", "string", "done", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_523": {"id": "0_523", "type": "TextControl", "attributes": [["text", "string", "lines = []\nlines_by_idx = '''11 12 11 23 12 24 23 24\n12 14 14 16\n16 18 18 20 20 16 16 22\n11 13 13 15\n15 17 17 19 19 15 15 21\n24 26 26 28\n28 32 32 30 30 28\n23 25 25 27\n27 29 29 31 31 27\n12 0 11 0'''\nlines_by_idx = list(map(int,lines_by_idx.replace(\"\\n\",\" \").split(\" \")))\nfor i in range(0,len(lines_by_idx),2):\n  lines.append(points[lines_by_idx[i]]+\n    points[lines_by_idx[i+1]])\n", true], ["label", "string", "", true], ["editable", "int", 1, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}, "0_524": {"id": "0_524", "type": "TextControl", "attributes": [["text", "string", "", false], ["label", "string", "", true], ["editable", "int", 0, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}, "0_565": {"id": "0_565", "type": "OutputPort", "attributes": [["name", "string", "lines", true], ["display_name", "string", "lines", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_656": {"id": "0_656", "type": "InputPort", "attributes": [["name", "string", "points", true], ["display_name", "string", "points", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "inputs": "inputs", "outputs": "outputs"}, "user_sobject_references": {"run_port": "0_521", "out_port": "0_522", "text_control": "0_523", "output_control": "0_524"}}, "0_748": {"id": "0_748", "type": "grapycal_builtin_504515.FuncInNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Input of: get lines", false], ["label_offset", "float", 0, true], ["translation", "string", "-325.54179207419804,-439.71617653175264", true], ["is_preview", "int", 0, true], ["category", "string", "function", true], ["exposed_attributes", "list", [{"name": "a/0_748/func_name", "display_name": "func_name", "editor_args": {"type": "text"}}, {"name": "a/0_748/outs", "display_name": "outs", "editor_args": {"type": "list"}}], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.FuncInNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", ["0_752"], true], ["controls", "obj_dict", {}, true], ["func_name", "string", "get lines", true], ["outs", "list", ["points"], true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_752": {"id": "0_752", "type": "OutputPort", "attributes": [["name", "string", "points", true], ["display_name", "string", "points", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "func_name": "func_name", "outs": "outs"}, "user_sobject_references": {}}, "0_750": {"id": "0_750", "type": "grapycal_builtin_504515.FuncOutNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Output of: get lines", false], ["label_offset", "float", 0, true], ["translation", "string", "441.24353628442583,-441.56344055648526", true], ["is_preview", "int", 0, true], ["category", "string", "function", true], ["exposed_attributes", "list", [{"name": "a/0_750/func_name", "display_name": "func_name", "editor_args": {"type": "text"}}, {"name": "a/0_750/ins", "display_name": "ins", "editor_args": {"type": "list"}}], true], ["running", "int", 1, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.FuncOutNode", true], ["in_ports", "obj_list", ["0_756"], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {}, true], ["func_name", "string", "get lines", true], ["ins", "list", ["lines"], true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_756": {"id": "0_756", "type": "InputPort", "attributes": [["name", "string", "lines", true], ["display_name", "string", "lines", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "func_name": "func_name", "ins": "ins"}, "user_sobject_references": {}}, "0_758": {"id": "0_758", "type": "grapycal_builtin_504515.FuncCallNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "Traceback (most recent call last):\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\core\\background_runner.py\", line 81, in run\n    task_to_run()\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\node.py\", line 405, in task_wrapper\n    task()\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 94, in start_function\n    inputs[port.name.get()] = port.get_one_data()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"], ["error", "  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 103, in end_function\n    FuncDefManager.outs[self.func_name.get()].end_function(self)\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in end_function\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\test_working_dirs\\working_dir_2\\.grapycal\\extensions\\grapycal_builtin_504515\\procedural\\funcDef.py\", line 234, in <dictcomp>\n    result = {key: self.get_in_port(key).get_one_data() for key in self.ins.get()}\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\port.py\", line 64, in get_one_data\n    return self.edges[0].get_data()\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"W:\\GrapicalPython\\Grapycal\\backend\\src\\grapycal\\sobjects\\edge.py\", line 66, in get_data\n    raise Exception('Data not available')\nException: Data not available\n"]], false], ["label", "string", "Call: get lines", false], ["label_offset", "float", 0, true], ["translation", "string", "-60.92363201236633,-29.840047863970334", true], ["is_preview", "int", 0, true], ["category", "string", "function", true], ["exposed_attributes", "list", [{"name": "a/0_758/func_name", "display_name": "func_name", "editor_args": {"type": "text"}}], true], ["running", "int", 2622, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.FuncCallNode", true], ["in_ports", "obj_list", ["0_759"], true], ["out_ports", "obj_list", ["0_760"], true], ["controls", "obj_dict", {}, true], ["func_name", "string", "get lines", true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_759": {"id": "0_759", "type": "InputPort", "attributes": [["name", "string", "points", true], ["display_name", "string", "points", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_760": {"id": "0_760", "type": "OutputPort", "attributes": [["name", "string", "lines", true], ["display_name", "string", "lines", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "func_name": "func_name"}, "user_sobject_references": {}}, "0_1014": {"id": "0_1014", "type": "grapycal_builtin_504515.LabelNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "1. Press \"load detector\"", false], ["label_offset", "float", 0, true], ["translation", "string", "-493.41476782110993,-205.6099071783051", true], ["is_preview", "int", 0, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_1014/label", "display_name": "label", "editor_args": {"type": "text"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.LabelNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {}}, "0_1121": {"id": "0_1121", "type": "grapycal_builtin_504515.ImageDisplayNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Display Image", false], ["label_offset", "float", 0, true], ["translation", "string", "-279.99512775655404,51.77250109151086", true], ["is_preview", "int", 0, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_1121/cmap", "display_name": "cmap", "editor_args": {"options": ["gray", "viridis", "plasma", "inferno", "magma", "cividis", "Greys", "Purples", "Blues", "Greens", "Oranges", "Reds", "YlOrBr", "YlOrRd", "OrRd", "PuRd", "RdPu", "BuPu", "GnBu", "PuBu", "YlGnBu", "PuBuGn", "BuGn", "YlGn", "binary", "gist_yarg", "gist_gray", "gray", "bone", "pink", "spring", "summer", "autumn", "winter", "cool", "Wistia", "hot", "afmhot", "gist_heat", "copper", "PiYG", "PRGn", "BrBG", "PuOr", "RdGy", "RdBu", "RdYlBu", "RdYlGn", "Spectral", "coolwarm", "bwr", "seismic", "twilight", "twilight_shifted", "hsv", "Pastel1", "Pastel2", "Paired", "Accent", "Dark2", "Set1", "Set2", "Set3", "tab10", "tab20", "tab20b", "tab20c", "flag", "prism", "ocean", "gist_earth", "terrain", "gist_stern", "gnuplot", "gnuplot2", "CMRmap", "cubehelix", "brg", "gist_rainbow", "rainbow", "jet", "nipy_spectral", "gist_ncar"], "type": "options"}}, {"name": "a/0_1121/vmin", "display_name": "vmin", "editor_args": {"type": "float"}}, {"name": "a/0_1121/vmax", "display_name": "vmax", "editor_args": {"type": "float"}}], true], ["running", "int", 5172, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_builtin_504515.ImageDisplayNode", true], ["in_ports", "obj_list", ["0_1124"], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {"img": "0_1122", "slice": "0_1123"}, true], ["cmap", "string", "gray", true], ["vmin", "float", 0, true], ["vmax", "float", 1, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_1122": {"id": "0_1122", "type": "ImageControl", "attributes": [["image", "string", "/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k=", false]], "children": {}, "user_attribute_references": {"image": "image"}, "user_sobject_references": {}}, "0_1123": {"id": "0_1123", "type": "TextControl", "attributes": [["text", "string", ":", true], ["label", "string", "slice: ", true], ["editable", "int", 1, true]], "children": {}, "user_attribute_references": {"text": "text", "label": "label", "editable": "editable"}, "user_sobject_references": {}}, "0_1124": {"id": "0_1124", "type": "InputPort", "attributes": [["name", "string", "data", true], ["display_name", "string", "data", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls", "cmap": "cmap", "vmin": "vmin", "vmax": "vmax"}, "user_sobject_references": {"img": "0_1122", "slice": "0_1123", "in_port": "0_1124"}}, "0_1158": {"id": "0_1158", "type": "grapycal_builtin_504515.LabelNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "2. Setup your webcam device", false], ["label_offset", "float", 0, true], ["translation", "string", "-492.2479382301461,-173.68023412949472", true], ["is_preview", "int", 0, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_1158/label", "display_name": "label", "editor_args": {"type": "text"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.LabelNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {}}, "0_1159": {"id": "0_1159", "type": "grapycal_builtin_504515.LabelNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "3. Press start streaming", false], ["label_offset", "float", 0, true], ["translation", "string", "-491.49173229709476,-140.96989645546083", true], ["is_preview", "int", 0, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_1159/label", "display_name": "label", "editor_args": {"type": "text"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.LabelNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {}}, "0_1165": {"id": "0_1165", "type": "grapycal_builtin_504515.LabelNode", "attributes": [["shape", "string", "simple", true], ["output", "list", [], false], ["label", "string", "Usage:", false], ["label_offset", "float", 0, true], ["translation", "string", "-493.824333020377,-236.0997790691733", true], ["is_preview", "int", 0, true], ["category", "string", "interaction", true], ["exposed_attributes", "list", [{"name": "a/0_1165/label", "display_name": "label", "editor_args": {"type": "text"}}], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_builtin_504515.LabelNode", true], ["in_ports", "obj_list", [], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {}}, "0_753": {"id": "0_753", "type": "Edge", "attributes": [["tail", "obj", "0_752", true], ["head", "obj", "0_656", true], ["label", "string", "", false], ["data_ready", "int", 5891, false]], "children": {}, "user_attribute_references": {"tail": "tail", "head": "head", "label": "label", "data_ready_topic": "data_ready"}, "user_sobject_references": {}}, "0_754": {"id": "0_754", "type": "Edge", "attributes": [["tail", "obj", "0_752", true], ["head", "obj", "0_521", true], ["label", "string", "", false], ["data_ready", "int", 3182, false]], "children": {}, "user_attribute_references": {"tail": "tail", "head": "head", "label": "label", "data_ready_topic": "data_ready"}, "user_sobject_references": {}}, "0_757": {"id": "0_757", "type": "Edge", "attributes": [["tail", "obj", "0_565", true], ["head", "obj", "0_756", true], ["label", "string", "", false], ["data_ready", "int", 3053, false]], "children": {}, "user_attribute_references": {"tail": "tail", "head": "head", "label": "label", "data_ready_topic": "data_ready"}, "user_sobject_references": {}}, "0_1258": {"id": "0_1258", "type": "grapycal_mediapipe_747764.ThreeNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [], false], ["label", "string", "Three", false], ["label_offset", "float", 0, true], ["translation", "string", "135.61840912850795,-78.6126377739495", true], ["is_preview", "int", 0, true], ["category", "string", "mediapipe", true], ["exposed_attributes", "list", [], true], ["running", "int", 1, false], ["css_classes", "set", ["fit-content"], true], ["type", "string", "grapycal_mediapipe_747764.ThreeNode", true], ["in_ports", "obj_list", ["0_1260", "0_1261"], true], ["out_ports", "obj_list", [], true], ["controls", "obj_dict", {"three": "0_1259"}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_1259": {"id": "0_1259", "type": "ThreeControl", "attributes": [["points", "list", [[-0.01935205515474081, 0.3320832601748407, -0.3591617215424776], [0.008549334481358528, 0.35886225616559386, -0.3481973875313997], [0.008718736469745636, 0.3570022932253778, -0.3357474971562624], [0.008444782346487045, 0.3592797867022455, -0.33821441419422626], [-0.024186453316360712, 0.36938044941052794, -0.3549958635121584], [-0.0205580722540617, 0.36800346290692687, -0.3699414301663637], [-0.02086281217634678, 0.35442469036206603, -0.3497642744332552], [0.10148215107619762, 0.3343337527476251, -0.23712505586445332], [-0.08597435988485813, 0.31597415124997497, -0.21274067647755146], [0.029303474351763725, 0.31481937086209655, -0.3089533317834139], [-0.0194935854524374, 0.28725082194432616, -0.3280052710324526], [0.17227057926356792, 0.13890302693471313, -0.13237260468304157], [-0.14178824611008167, 0.24205026542767882, -0.024486998096108437], [0.17484776489436626, -0.05763808870688081, -0.23213295824825764], [-0.2845942098647356, -0.0027098008431494236, -0.11321972496807575], [0.08880533091723919, -0.2310031265951693, -0.2682298291474581], [-0.5233788210898638, -0.07052260870113969, -0.20928971655666828], [0.0810245256870985, -0.2657585986889899, -0.2763067651540041], [-0.5610524136573076, -0.06722919130697846, -0.24259467609226704], [0.030540434643626213, -0.250664955470711, -0.28345520980656147], [-0.5505993086844683, -0.039893040899187326, -0.26355780847370625], [0.07045814208686352, -0.24593040207400918, -0.2750102449208498], [-0.533883722499013, -0.0637951442040503, -0.230846481397748], [0.0828262772411108, -0.2061325036920607, 0.08972611837089062], [-0.11330861039459705, -0.17482078867033124, 0.06713348440825939], [0.07319035194814205, -0.6115788766182959, -0.04012899287045002], [-0.07471966929733753, -0.5154819139279425, -0.024520957842469215], [0.09494557045400143, -0.925962592009455, 0.055669138208031654], [-0.14939607866108418, -0.8775058635510504, 0.14778371714055538], [0.07685174606740475, -0.9537750133313239, 0.06879470497369766], [-0.1525117177516222, -0.9047754057683051, 0.12211780808866024], [0.029952531680464745, -0.9199438341893256, 0.0026693101972341537], [-0.14319992251694202, -0.8998735793866217, 0.0645811315625906]], true], ["lines", "list", [[0.17227057926356792, 0.13890302693471313, -0.13237260468304157, -0.14178824611008167, 0.24205026542767882, -0.024486998096108437], [0.17227057926356792, 0.13890302693471313, -0.13237260468304157, 0.0828262772411108, -0.2061325036920607, 0.08972611837089062], [-0.14178824611008167, 0.24205026542767882, -0.024486998096108437, -0.11330861039459705, -0.17482078867033124, 0.06713348440825939], [0.0828262772411108, -0.2061325036920607, 0.08972611837089062, -0.11330861039459705, -0.17482078867033124, 0.06713348440825939], [-0.14178824611008167, 0.24205026542767882, -0.024486998096108437, -0.2845942098647356, -0.0027098008431494236, -0.11321972496807575], [-0.2845942098647356, -0.0027098008431494236, -0.11321972496807575, -0.5233788210898638, -0.07052260870113969, -0.20928971655666828], [-0.5233788210898638, -0.07052260870113969, -0.20928971655666828, -0.5610524136573076, -0.06722919130697846, -0.24259467609226704], [-0.5610524136573076, -0.06722919130697846, -0.24259467609226704, -0.5505993086844683, -0.039893040899187326, -0.26355780847370625], [-0.5505993086844683, -0.039893040899187326, -0.26355780847370625, -0.5233788210898638, -0.07052260870113969, -0.20928971655666828], [-0.5233788210898638, -0.07052260870113969, -0.20928971655666828, -0.533883722499013, -0.0637951442040503, -0.230846481397748], [0.17227057926356792, 0.13890302693471313, -0.13237260468304157, 0.17484776489436626, -0.05763808870688081, -0.23213295824825764], [0.17484776489436626, -0.05763808870688081, -0.23213295824825764, 0.08880533091723919, -0.2310031265951693, -0.2682298291474581], [0.08880533091723919, -0.2310031265951693, -0.2682298291474581, 0.0810245256870985, -0.2657585986889899, -0.2763067651540041], [0.0810245256870985, -0.2657585986889899, -0.2763067651540041, 0.030540434643626213, -0.250664955470711, -0.28345520980656147], [0.030540434643626213, -0.250664955470711, -0.28345520980656147, 0.08880533091723919, -0.2310031265951693, -0.2682298291474581], [0.08880533091723919, -0.2310031265951693, -0.2682298291474581, 0.07045814208686352, -0.24593040207400918, -0.2750102449208498], [-0.11330861039459705, -0.17482078867033124, 0.06713348440825939, -0.07471966929733753, -0.5154819139279425, -0.024520957842469215], [-0.07471966929733753, -0.5154819139279425, -0.024520957842469215, -0.14939607866108418, -0.8775058635510504, 0.14778371714055538], [-0.14939607866108418, -0.8775058635510504, 0.14778371714055538, -0.14319992251694202, -0.8998735793866217, 0.0645811315625906], [-0.14319992251694202, -0.8998735793866217, 0.0645811315625906, -0.1525117177516222, -0.9047754057683051, 0.12211780808866024], [-0.1525117177516222, -0.9047754057683051, 0.12211780808866024, -0.14939607866108418, -0.8775058635510504, 0.14778371714055538], [0.0828262772411108, -0.2061325036920607, 0.08972611837089062, 0.07319035194814205, -0.6115788766182959, -0.04012899287045002], [0.07319035194814205, -0.6115788766182959, -0.04012899287045002, 0.09494557045400143, -0.925962592009455, 0.055669138208031654], [0.09494557045400143, -0.925962592009455, 0.055669138208031654, 0.07685174606740475, -0.9537750133313239, 0.06879470497369766], [0.07685174606740475, -0.9537750133313239, 0.06879470497369766, 0.029952531680464745, -0.9199438341893256, 0.0026693101972341537], [0.029952531680464745, -0.9199438341893256, 0.0026693101972341537, 0.09494557045400143, -0.925962592009455, 0.055669138208031654], [-0.14178824611008167, 0.24205026542767882, -0.024486998096108437, -0.01935205515474081, 0.3320832601748407, -0.3591617215424776], [0.17227057926356792, 0.13890302693471313, -0.13237260468304157, -0.01935205515474081, 0.3320832601748407, -0.3591617215424776]], true]], "children": {}, "user_attribute_references": {"points": "points", "lines": "lines"}, "user_sobject_references": {}}, "0_1260": {"id": "0_1260", "type": "InputPort", "attributes": [["name", "string", "points", true], ["display_name", "string", "points", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_1261": {"id": "0_1261", "type": "InputPort", "attributes": [["name", "string", "lines", true], ["display_name", "string", "lines", true], ["max_edges", "int", 64, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {"three": "0_1259", "points_port": "0_1260", "lines_port": "0_1261"}}, "0_1262": {"id": "0_1262", "type": "grapycal_mediapipe_747764.PoseEstimateNode", "attributes": [["shape", "string", "normal", true], ["output", "list", [["output", "detector model found in local directory\n"], ["output", "loading detector model...\n"], ["output", "detector model loaded\n"], ["output", "no pose detected\n"]], false], ["label", "string", "Pose Estimate", false], ["label_offset", "float", 0, true], ["translation", "string", "-286.8854643120901,-77.62456835990119", true], ["is_preview", "int", 0, true], ["category", "string", "mediapipe", true], ["exposed_attributes", "list", [], true], ["running", "int", 3681, false], ["css_classes", "set", [], true], ["type", "string", "grapycal_mediapipe_747764.PoseEstimateNode", true], ["in_ports", "obj_list", ["0_1263"], true], ["out_ports", "obj_list", ["0_1264", "0_1265"], true], ["controls", "obj_dict", {"load detector": "0_1266"}, true], ["double_click", "event", null, false], ["spawn", "event", null, false]], "children": {"0_1263": {"id": "0_1263", "type": "InputPort", "attributes": [["name", "string", "image", true], ["display_name", "string", "image", true], ["max_edges", "int", 1, true], ["is_input", "int", 1, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_1264": {"id": "0_1264", "type": "OutputPort", "attributes": [["name", "string", "points", true], ["display_name", "string", "points", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_1265": {"id": "0_1265", "type": "OutputPort", "attributes": [["name", "string", "annotated img", true], ["display_name", "string", "annotated img", true], ["max_edges", "int", 64, true], ["is_input", "int", 0, true]], "children": {}, "user_attribute_references": {"name": "name", "display_name": "display_name", "max_edges": "max_edges", "is_input": "is_input"}, "user_sobject_references": {}}, "0_1266": {"id": "0_1266", "type": "ButtonControl", "attributes": [["label", "string", "detector loaded", true], ["click", "event", null, false]], "children": {}, "user_attribute_references": {"label": "label", "_click": "click"}, "user_sobject_references": {}}}, "user_attribute_references": {"shape": "shape", "output": "output", "label": "label", "label_offset": "label_offset", "translation": "translation", "is_preview": "is_preview", "category_": "category", "exposed_attributes": "exposed_attributes", "running": "running", "css_classes": "css_classes", "type_topic": "type", "in_ports": "in_ports", "out_ports": "out_ports", "controls": "controls"}, "user_sobject_references": {"points_port": "0_1264", "annotated_img_port": "0_1265", "load_detector_button": "0_1266"}}, "0_1267": {"id": "0_1267", "type": "Edge", "attributes": [["tail", "obj", "0_1264", true], ["head", "obj", "0_1260", true], ["label", "string", "", false], ["data_ready", "int", 9640, false]], "children": {}, "user_attribute_references": {"tail": "tail", "head": "head", "label": "label", "data_ready_topic": "data_ready"}, "user_sobject_references": {}}, "0_1268": {"id": "0_1268", "type": "Edge", "attributes": [["tail", "obj", "0_760", true], ["head", "obj", "0_1261", true], ["label", "string", "", false], ["data_ready", "int", 9794, false]], "children": {}, "user_attribute_references": {"tail": "tail", "head": "head", "label": "label", "data_ready_topic": "data_ready"}, "user_sobject_references": {}}, "0_1270": {"id": "0_1270", "type": "Edge", "attributes": [["tail", "obj", "0_1264", true], ["head", "obj", "0_759", true], ["label", "string", "", false], ["data_ready", "int", 8344, false]], "children": {}, "user_attribute_references": {"tail": "tail", "head": "head", "label": "label", "data_ready_topic": "data_ready"}, "user_sobject_references": {}}, "0_1271": {"id": "0_1271", "type": "Edge", "attributes": [["tail", "obj", "0_1265", true], ["head", "obj", "0_87", true], ["label", "string", "", false], ["data_ready", "int", 3110, false]], "children": {}, "user_attribute_references": {"tail": "tail", "head": "head", "label": "label", "data_ready_topic": "data_ready"}, "user_sobject_references": {}}, "0_1269": {"id": "0_1269", "type": "Edge", "attributes": [["tail", "obj", "0_82", true], ["head", "obj", "0_1263", true], ["label", "string", "", false], ["data_ready", "int", 3951, false]], "children": {}, "user_attribute_references": {"tail": "tail", "head": "head", "label": "label", "data_ready_topic": "data_ready"}, "user_sobject_references": {}}, "0_1256": {"id": "0_1256", "type": "Edge", "attributes": [["tail", "obj", "0_82", true], ["head", "obj", "0_1124", true], ["label", "string", "", false], ["data_ready", "int", 9555, false]], "children": {}, "user_attribute_references": {"tail": "tail", "head": "head", "label": "label", "data_ready_topic": "data_ready"}, "user_sobject_references": {}}}, "user_attribute_references": {}, "user_sobject_references": {}}}, "user_attribute_references": {}, "user_sobject_references": {"webcam": "0_2", "sidebar": "0_3", "main_editor": "0_4"}}}